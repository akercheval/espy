# Grammar for Python

# Note:  Changing the grammar specified in this file will most likely
#        require corresponding changes in the parser module
#        (../Modules/parsermodule.c).  If you can't make the changes to
#        that module yourself, please co-ordinate the required changes
#        with someone who can; ask around on python-dev for help.  Fred
#        Drake <fdrake@acm.org> will probably be listening there.

# NOTE WELL: You should also follow all the steps listed in PEP 306,
# "How to Change Python's Grammar"

# Start symbols for the grammar:
#	single_input is a single interactive statement;
#	file_input is a module or sequence of commands read from an input file;
#	eval_input is the input for the eval() and input() functions.
# NB: compound_stmt in single_input is followed by extra NEWLINE!
single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
file_input: (NEWLINE | stmt)* ENDMARKER
eval_input: testlist NEWLINE* ENDMARKER

decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE
decorators: decorator+
decorated: decorators (classdef | funcdef)
funcdef: 'def' NAME parameters ':' suite
parameters: '(' [varargslist] ')'
varargslist: ((fpdef ['=' test] ',')*
              ('*' NAME [',' '**' NAME] | '**' NAME) |
              fpdef ['=' test] (',' fpdef ['=' test])* [','])
fpdef: NAME | '(' fplist ')'
fplist: fpdef (',' fpdef)* [',']

stmt: simple_stmt | compound_stmt
simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
small_stmt: (expr_stmt | print_stmt  | del_stmt | pass_stmt | flow_stmt |
             import_stmt | global_stmt | exec_stmt | assert_stmt)
expr_stmt: testlist (augassign (yield_expr|testlist) |
                     ('=' (yield_expr|testlist))*)
augassign: ('+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |
            '<<=' | '>>=' | '**=' | '//=')
# For normal assignments, additional restrictions enforced by the interpreter
#
# not changing print to imprimir, because I changed it already in 
# pypy/module/__builtin__/__init__.py
print_stmt: 'print' ( [ test (',' test)* [','] ] |
                      '>>' test [ (',' test)+ [','] ] )
del_stmt: ('del' | 'elim') exprlist
pass_stmt: 'pass' | 'pasa'
flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
break_stmt: 'break' | 'romper'
continue_stmt: 'continue' | 'continuar'
return_stmt: ('return' | 'volver') [testlist] 
yield_stmt: yield_expr
raise_stmt: ('raise' | 'levantar') [test [',' test [',' test]]]
import_stmt: import_name | import_from
import_name: ('import' | 'importar') dotted_as_names
import_from: (('from' | 'de') ('.'* dotted_name | '.'+)
              ('import' | 'importar')
              ('*' | '(' import_as_names ')' | import_as_names))
import_as_name: NAME [('as' | 'como') NAME]
dotted_as_name: dotted_name [('as' | 'como') NAME]
import_as_names: import_as_name (',' import_as_name)* [',']
dotted_as_names: dotted_as_name (',' dotted_as_name)*
dotted_name: NAME ('.' NAME)*
global_stmt: 'global' NAME (',' NAME)*
exec_stmt: 'exec' expr ['in' test [',' test]]
assert_stmt: ('assert' | 'afirmar') test [',' test]

compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated
if_stmt: ('if' | 'si') test ':' suite (('elif' | 'sino') test ':' suite)* 
         [('else' | 'si_no') ':' suite]
while_stmt: ('while' | 'mientras') test ':' suite [('else' | 'si_no') ':' suite]
for_stmt: ('for' | 'para') exprlist ('in' | 'en') testlist ':' suite 
          [('else' | 'si_no') ':' suite]
try_stmt: (('try' | 'probar') ':' suite
           ((except_clause ':' suite)+
	    [('else' | 'si_no') ':' suite]
	    [('finally' | 'porfin') ':' suite] |
	   ('finally' | 'porfin') ':' suite))
with_stmt: ('with' | 'con') with_item (',' with_item)*  ':' suite
with_item: test [('as' | 'como') expr]
# NB compile.c makes sure that the default except clause is last
except_clause: ('except' | 'excepto') [test [(('as' | 'como') | ',') test]]
suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT

# Backward compatibility cruft to support:
# [ x for x in lambda: True, lambda: False if x() ]
# even while also allowing:
# lambda x: 5 if x else 2
# (But not a mix of the two)
testlist_safe: old_test [(',' old_test)+ [',']]
old_test: or_test | old_lambdef
old_lambdef: 'lambda' [varargslist] ':' old_test

test: or_test [('if' | 'si') or_test ('else' | 'si_no') test] | lambdef
or_test: and_test (('or' | 'o') and_test)*
and_test: not_test (('and' | 'y') not_test)*
not_test: ('not' | 'no') not_test | comparison
comparison: expr (comp_op expr)*
comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='| ('in' | 'en') |
         ('not' | 'no') ('in' | 'en') | ('is' | 'es') |
         ('is' | 'es') ('not' | 'no')
expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&' shift_expr)*
shift_expr: arith_expr (('<<'|'>>') arith_expr)*
arith_expr: term (('+'|'-') term)*
term: factor (('*'|'/'|'%'|'//') factor)*
factor: ('+'|'-'|'~') factor | power
power: atom trailer* ['**' factor]
atom: ('(' [yield_expr|testlist_comp] ')' |
       '[' [listmaker] ']' |
       '{' [dictorsetmaker] '}' |
       '`' testlist1 '`' |
       NAME | NUMBER | STRING+)
listmaker: test ( list_for | (',' test)* [','] )
testlist_comp: test ( comp_for | (',' test)* [','] )
lambdef: 'lambda' [varargslist] ':' test
trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
subscriptlist: subscript (',' subscript)* [',']
subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
sliceop: ':' [test]
exprlist: expr (',' expr)* [',']
testlist: test (',' test)* [',']
dictmaker: test ':' test (',' test ':' test)* [',']
dictorsetmaker: ( (test ':' test (comp_for | (',' test ':' test)* [','])) |
                  (test (comp_for | (',' test)* [','])) )

classdef: ('class' | 'clase') NAME ['(' [testlist] ')'] ':' suite

arglist: (argument ',')* (argument [',']
                         |'*' test (',' argument)* [',' '**' test] 
                         |'**' test)
# The reason that keywords are test nodes instead of NAME is that using NAME
# results in an ambiguity. ast.c makes sure it's a NAME.
argument: test [comp_for] | test '=' test

list_iter: list_for | list_if
list_for: ('for' | 'para') exprlist ('in' | 'en') testlist_safe [list_iter]
list_if: ('if' | 'si') old_test [list_iter]

comp_iter: comp_for | comp_if
comp_for: ('for' | 'para') exprlist ('in' | 'en') or_test [comp_iter]
comp_if: ('if' | 'si') old_test [comp_iter]

testlist1: test (',' test)*

# not used in grammar, but may appear in "node" passed from Parser to Compiler
encoding_decl: NAME

yield_expr: 'yield' [testlist]
